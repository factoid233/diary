{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/jacoco.md","hash":"20d9819e7ee02d25d09daceb119f5283f06d14c5","modified":1684290072362},{"_id":"source/_posts/nginx.md","hash":"be82ca6f742f0c114137c1f6bf256133fe06a875","modified":1684290067193},{"_id":"source/_posts/jacoco_share.md","hash":"16a770a1c3c081f820f36b3692a634896453d325","modified":1684293831269},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1684286683459},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1684286683459},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1684286683460},{"_id":"themes/next/.gitignore","hash":"d9021ac0041b511356fc7044cb02c6e0e567d706","modified":1684286683461},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1684286683461},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1684286683462},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1684286683463},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1684286683463},{"_id":"themes/next/_config.yml","hash":"e672b2b50b24ca270030be5bf29dfae3151e2af2","modified":1684293555550},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1684286683484},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1684286683465},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1684286683558},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1684286683467},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1684286683466},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1684286683468},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1684286683468},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1684286683470},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1684286683471},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1684286683471},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1684286683472},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1684286683473},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1684286683485},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1684286683486},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1684286683486},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1684286683487},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1684286683488},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1684286683488},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1684286683489},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1684286683490},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1684286683490},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1684286683492},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1684286683491},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1684286683492},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1684286683493},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1684286683493},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1684286683494},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1684286683495},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1684286683495},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1684286683496},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1684286683497},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1684286683500},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1684286683497},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1684286683498},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1684286683555},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1684286683499},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1684286683556},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1684286683555},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1684286683556},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1684286683557},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1684286683558},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1684286683576},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1684286683475},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1684286683474},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1684286683476},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1684286683477},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1684286683475},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1684286683478},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1684286683479},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1684286683480},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1684286683480},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1684286683481},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1684286683482},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1684286683483},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1684286683483},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1684286683504},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"c459531bba73a11ce84435d2c91f105ecd0e310a","modified":1684286683501},{"_id":"themes/next/layout/_macro/post.swig","hash":"60d4ab526812d93ad17e44e51ddaf5d7d4e06475","modified":1684286683502},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1684286683503},{"_id":"themes/next/layout/_partials/footer.swig","hash":"a76355d230792e924ea3beb3094bad4b51567419","modified":1684286683504},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1684286683511},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1684286683513},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1684286683523},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1684286683522},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1684286683525},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1684286683523},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1684286683529},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1684286683530},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"bd9ba0bf60cc3008ee14339fa395ee6af188e879","modified":1684286683535},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1684286683542},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1684286683545},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1684286683545},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1684286683571},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1684286683570},{"_id":"themes/next/scripts/events/index.js","hash":"7baf362743b3d30626066614d877891fc140c502","modified":1684286683560},{"_id":"themes/next/scripts/filters/post.js","hash":"cf5b0db0a9271687f7a21bc581ae87addd8f0767","modified":1684286683572},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1684286683570},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1684286683572},{"_id":"themes/next/scripts/helpers/engine.js","hash":"6abda91b431c9b6f6cd2adfa665e694cfdb171be","modified":1684286683573},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1684286683574},{"_id":"themes/next/scripts/tags/button.js","hash":"178d3efb8d2c1aca606181894c352fc65c40c32a","modified":1684286683577},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1684286683575},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1684286683578},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1684286683575},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e11a738ee77c4304add79c964bdec3715c45653a","modified":1684286683578},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1684286683579},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1684286683580},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1684286683581},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1684286683581},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1684286683580},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1684286683582},{"_id":"themes/next/source/css/_colors.styl","hash":"9d65353ca8c634eb96142dcee1b36b6f1004522a","modified":1684286683584},{"_id":"themes/next/source/css/_mixins.styl","hash":"cf81a6731aa436e7bb8d9a743b01f62107e27dd3","modified":1684286683636},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1684286683583},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1684286683655},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1684286683656},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1684286683674},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1684286683657},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1684286683658},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1684286683659},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1684286683660},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1684286683658},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1684286683660},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1684286683661},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1684286683662},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1684286683663},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1684286683664},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1684286683664},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1684286683662},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1684286683665},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1684286683665},{"_id":"themes/next/source/js/algolia-search.js","hash":"f0cee802b4d48d5e78ba88d77d4257cb8a88dd6e","modified":1684286683667},{"_id":"themes/next/source/js/bookmark.js","hash":"2268bfcab8cf9019e590e2d356b08a3d4a0cf791","modified":1684286683667},{"_id":"themes/next/source/js/local-search.js","hash":"8f046860139f8dc7d1b445290a19e391800ff322","modified":1684286683668},{"_id":"themes/next/source/js/next-boot.js","hash":"509c5b02446d4989a6ef3081cafeb9497cdde4e5","modified":1684286683669},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1684286683505},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1684286683668},{"_id":"themes/next/source/js/utils.js","hash":"212349738695f0c5dffcf26f6a3d33ce912e4ed4","modified":1684286683673},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"ca1b16202403515550f57b51dccb19afcb10ccf1","modified":1684286683506},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"6a3901962ad7e698640a288be627947de90de1f6","modified":1684286683510},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1684286683507},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1684286683508},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"11acd6b585eeb823358e642c7dde7d637fda706f","modified":1684286683509},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"5fd5ba53962aefccb43b1d2b306a534add2373e1","modified":1684286683515},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1684286683510},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"deffa919e72da6c2cdc2f32d403c809916bd36d1","modified":1684286683515},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1684286683516},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1684286683513},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1684286683512},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1684286683519},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1684286683517},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1684286683519},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"d1b9a43bdfaf2b151cce1a74d23e65c2e488e41b","modified":1684286683521},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1684286683525},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1684286683527},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1684286683526},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1684286683518},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1684286683528},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1684286683532},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1684286683528},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1684286683520},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1684286683533},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1684286683536},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1684286683537},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1684286683534},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1684286683534},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1684286683541},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1684286683540},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1684286683539},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1684286683543},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1684286683541},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1684286683544},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1684286683539},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1684286683547},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"5b5618c2f6ad1d7971e6db257222fce89aa56565","modified":1684286683549},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1684286683547},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1684286683544},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1684286683548},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1684286683550},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1684286683551},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1684286683551},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1684286683561},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1684286683563},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1684286683552},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1684286683553},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1684286683554},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"d002c9eea7e7dd31b64a4172012d4294489974d5","modified":1684286683564},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1684286683562},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"31a6c8fbdfa16112b0b099727437b9df7641d421","modified":1684286683565},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1684286683538},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1684286683566},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1684286683567},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"14917c0f9ac76b50296e64437316cba0966c61d1","modified":1684286683566},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1684286683652},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1684286683568},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"7ff11f64f4315d06ba585928fc9a8bc3761894a5","modified":1684286683569},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1684286683652},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1684286683568},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1684286683653},{"_id":"themes/next/source/css/_variables/base.styl","hash":"fa086b75ff09268e22adf6cb36b2b6720306d824","modified":1684286683654},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"93625aa12a40482fe911e350758f9b4abe4546ff","modified":1684286683654},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1684286683676},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1684286683676},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1684286683678},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1684286683678},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1684286683677},{"_id":"themes/next/source/js/schemes/muse.js","hash":"78c77614b9fe0d7d97aa08468c6cffbcbda96b75","modified":1684286683671},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1684286683691},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1684286683690},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"1a9741145938e2c754a808381350723cbebf43c5","modified":1684286683672},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1684286683587},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1684286683586},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1684286683588},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1684286683601},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1684286683612},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1684286683613},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6471369bd120986f4afad25ad1216f9c4e8405d5","modified":1684286683621},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1684286683622},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1684286683623},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1684286683627},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1684286683627},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1684286683628},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"7ed4733240206d1aa729c835e69a85f8f3c73cd6","modified":1684286683629},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1684286683635},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1684286683637},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1684286683638},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1684286683640},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1684286683639},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1684286683640},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1684286683641},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1684286683643},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1684286683643},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"83b7104a319cfbf6af3548f354240eb07dd73d38","modified":1684286683644},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1684286683645},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1684286683645},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1684286683648},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1684286683647},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1684286683646},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"315eea625a90a19421b6d6413322ae40bb5ad4c6","modified":1684286683648},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"c9df5ee78b46f4a2926e6e88fbe1ba1a9a75aecc","modified":1684286683650},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"919068c7db32bfee26238e3a783efe14b3060d63","modified":1684286683649},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1684286683650},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1684286683589},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1684286683680},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1684286683681},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"66001b7624ca044f9c06e75036f0e6e4b091b094","modified":1684286683591},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1684286683589},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1684286683590},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"a22c639cdf1073c9d060af62233125991ddf4dd5","modified":1684286683591},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"5912a1676a973b6d9291b43aec6aeeef6871d1ed","modified":1684286683592},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1684286683593},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1684286683594},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1684286683595},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1684286683595},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1684286683596},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"44749e3f07a328d81a959708316494d3d737ab57","modified":1684286683596},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"81b2bbd6fb590101a089bc390ed4934f5c462215","modified":1684286683597},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"82a275ca74086a46b8e82d5ebf78c7a807cd9c8b","modified":1684286683598},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1684286683682},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1684286683598},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1684286683599},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1684286683599},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1684286683602},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1684286683600},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1684286683603},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1684286683602},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1684286683604},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1684286683606},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1684286683604},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"f7977cfacaca9db6fab4d154486ad57ec4b0fde9","modified":1684286683607},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1684286683608},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1684286683608},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1684286683609},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"73c578914052e11392cd4364af9075b66832b793","modified":1684286683610},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1684286683614},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"0812ae7ecd1d8c60ec4290f506ec10881ed0fca8","modified":1684286683616},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1684286683615},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1684286683616},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1684286683617},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1684286683617},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1684286683618},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1684286683619},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1684286683619},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1684286683624},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1684286683620},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1684286683624},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1684286683626},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1684286683625},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"8c318a485c56dbdcdb22fd00781484ecc151bf8a","modified":1684286683630},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1684286683630},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"9d1f42d01f6e346b61f83cdd4f5fbd3bf8e44968","modified":1684286683632},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1684286683631},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1684286683632},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1684286683634},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1684286683633},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1684286683611},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1684286683611},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1684286683687},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1684286683688},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1684286683685},{"_id":"public/2021/05/15/jacoco/index.html","hash":"d3b326b88c00726118acc00aea12deda4acc8322","modified":1684293840390},{"_id":"public/archives/index.html","hash":"d0b4484336e6fe75bec800b42623410ba506e48c","modified":1684293840390},{"_id":"public/2021/05/10/nginx/index.html","hash":"fc0bd0f0160ab16b8fc6bdbd80eed245c6fffb49","modified":1684293840390},{"_id":"public/archives/2021/index.html","hash":"8f1f33e3957a35328a01a21f0f6a35c9387394b4","modified":1684293840390},{"_id":"public/archives/2021/05/index.html","hash":"ab707c63ba0082b7578f9a245a9c2d93987786f7","modified":1684293840390},{"_id":"public/archives/2021/06/index.html","hash":"f997e78bd55186634184a79ed82ea56014c216d1","modified":1684293840390},{"_id":"public/2021/06/12/jacoco_share/index.html","hash":"8d8948a8fd0100a0107b68bdb258bb6c281981a1","modified":1684293840390},{"_id":"public/index.html","hash":"221e0d2ea307bf2af655becefda92724a4ea1aee","modified":1684293840390},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1684293840390},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1684293840390},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1684293840390},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1684293840390},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1684293840390},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1684293840390},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1684293840390},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1684293840390},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1684293840390},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1684293840390},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1684293840390},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1684293840390},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1684293840390},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1684293840390},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1684293840390},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1684293840390},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1684293840390},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1684293840390},{"_id":"public/css/main.css","hash":"7783e80395eb2c5df3c6b800746225c5bc43c81b","modified":1684293840390},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1684293840390},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1684293840390},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1684293840390},{"_id":"public/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1684293840390},{"_id":"public/js/local-search.js","hash":"b42bd1c883ce91db8632d96e0f0e062cb6b73adc","modified":1684293840390},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1684293840390},{"_id":"public/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1684293840390},{"_id":"public/js/utils.js","hash":"95c5d37aa06521675afcf8619cfc5dbba3d2e18a","modified":1684293840390},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1684293840390},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1684293840390},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1684293840390},{"_id":"public/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1684293840390},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1684293840390},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1684293840390},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1684293840390},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1684293840390}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"jacoco 增量代码覆盖率笔记 踩坑记录","date":"2021-05-14T16:00:00.000Z","_content":"## 1. gitlab 分支比较的api(Repositories API Compare) 返回的响应中 $.diffs[*].diff 为空\n  - 现象： 由于gitlab Diff limits的限制，即Maximum diff patch size最大只能为500KB，现像为如果新增一个文件行数特别多，返回的响应结果中 diff就是空的\n    > This endpoint can be accessed without authentication if the repository is publicly accessible. Note that diffs could have an empty diff string if diff limits are reached.  <br/> [gitlab Compare Api链接](https://docs.gitlab.com/ee/api/repositories.html#compare-branches-tags-or-commits)<br/>\n    > \n      | Value                       | Definition                                    | Default value | Maximum value |\n      | :-------------------------- | :-------------------------------------------- | :-----------: | :-----------: |\n      | **Maximum diff patch size** | The total size, in bytes, of the entire diff. |    200 KB     |    500 KB     |\n      | **Maximum diff files**      | The total number of files changed in a diff.  |     1000      |     3000      |\n      | **Maximum diff lines**      | The total number of lines changed in a diff.  |    50,000     |    100,000    |\n     > [gitlab diff limit链接](https://docs.gitlab.com/ee/user/admin_area/diff_limits.html)\n  - 解决方案： 采用Jgit本地操作git仓库进行diff比较\n## 2. java编译提示 Invalid signature file digest for Manifest main attributes \n  - 解决方案： 删除jar包中的 *.SF *.DSA  *.RSA文件  \n","source":"_posts/jacoco.md","raw":"---\ntitle: jacoco 增量代码覆盖率笔记 踩坑记录\ndate: 2021/05/15 00:00:00\n---\n## 1. gitlab 分支比较的api(Repositories API Compare) 返回的响应中 $.diffs[*].diff 为空\n  - 现象： 由于gitlab Diff limits的限制，即Maximum diff patch size最大只能为500KB，现像为如果新增一个文件行数特别多，返回的响应结果中 diff就是空的\n    > This endpoint can be accessed without authentication if the repository is publicly accessible. Note that diffs could have an empty diff string if diff limits are reached.  <br/> [gitlab Compare Api链接](https://docs.gitlab.com/ee/api/repositories.html#compare-branches-tags-or-commits)<br/>\n    > \n      | Value                       | Definition                                    | Default value | Maximum value |\n      | :-------------------------- | :-------------------------------------------- | :-----------: | :-----------: |\n      | **Maximum diff patch size** | The total size, in bytes, of the entire diff. |    200 KB     |    500 KB     |\n      | **Maximum diff files**      | The total number of files changed in a diff.  |     1000      |     3000      |\n      | **Maximum diff lines**      | The total number of lines changed in a diff.  |    50,000     |    100,000    |\n     > [gitlab diff limit链接](https://docs.gitlab.com/ee/user/admin_area/diff_limits.html)\n  - 解决方案： 采用Jgit本地操作git仓库进行diff比较\n## 2. java编译提示 Invalid signature file digest for Manifest main attributes \n  - 解决方案： 删除jar包中的 *.SF *.DSA  *.RSA文件  \n","slug":"jacoco","published":1,"updated":"2021-05-14T16:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhr52drd00009gvtdbzc0es4","content":"<h2 id=\"1-gitlab-分支比较的api-Repositories-API-Compare-返回的响应中-diffs-diff-为空\"><a href=\"#1-gitlab-分支比较的api-Repositories-API-Compare-返回的响应中-diffs-diff-为空\" class=\"headerlink\" title=\"1. gitlab 分支比较的api(Repositories API Compare) 返回的响应中 $.diffs[*].diff 为空\"></a>1. gitlab 分支比较的api(Repositories API Compare) 返回的响应中 $.diffs[*].diff 为空</h2><ul>\n<li>现象： 由于gitlab Diff limits的限制，即Maximum diff patch size最大只能为500KB，现像为如果新增一个文件行数特别多，返回的响应结果中 diff就是空的<blockquote>\n<p>This endpoint can be accessed without authentication if the repository is publicly accessible. Note that diffs could have an empty diff string if diff limits are reached.  <br/> <a href=\"https://docs.gitlab.com/ee/api/repositories.html#compare-branches-tags-or-commits\">gitlab Compare Api链接</a><br/></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Value</th>\n<th align=\"left\">Definition</th>\n<th align=\"center\">Default value</th>\n<th align=\"center\">Maximum value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>Maximum diff patch size</strong></td>\n<td align=\"left\">The total size, in bytes, of the entire diff.</td>\n<td align=\"center\">200 KB</td>\n<td align=\"center\">500 KB</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Maximum diff files</strong></td>\n<td align=\"left\">The total number of files changed in a diff.</td>\n<td align=\"center\">1000</td>\n<td align=\"center\">3000</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Maximum diff lines</strong></td>\n<td align=\"left\">The total number of lines changed in a diff.</td>\n<td align=\"center\">50,000</td>\n<td align=\"center\">100,000</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><a href=\"https://docs.gitlab.com/ee/user/admin_area/diff_limits.html\">gitlab diff limit链接</a></p>\n</blockquote>\n</li>\n<li>解决方案： 采用Jgit本地操作git仓库进行diff比较<h2 id=\"2-java编译提示-Invalid-signature-file-digest-for-Manifest-main-attributes\"><a href=\"#2-java编译提示-Invalid-signature-file-digest-for-Manifest-main-attributes\" class=\"headerlink\" title=\"2. java编译提示 Invalid signature file digest for Manifest main attributes\"></a>2. java编译提示 Invalid signature file digest for Manifest main attributes</h2></li>\n<li>解决方案： 删除jar包中的 *.SF *.DSA  *.RSA文件  </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-gitlab-分支比较的api-Repositories-API-Compare-返回的响应中-diffs-diff-为空\"><a href=\"#1-gitlab-分支比较的api-Repositories-API-Compare-返回的响应中-diffs-diff-为空\" class=\"headerlink\" title=\"1. gitlab 分支比较的api(Repositories API Compare) 返回的响应中 $.diffs[*].diff 为空\"></a>1. gitlab 分支比较的api(Repositories API Compare) 返回的响应中 $.diffs[*].diff 为空</h2><ul>\n<li>现象： 由于gitlab Diff limits的限制，即Maximum diff patch size最大只能为500KB，现像为如果新增一个文件行数特别多，返回的响应结果中 diff就是空的<blockquote>\n<p>This endpoint can be accessed without authentication if the repository is publicly accessible. Note that diffs could have an empty diff string if diff limits are reached.  <br/> <a href=\"https://docs.gitlab.com/ee/api/repositories.html#compare-branches-tags-or-commits\">gitlab Compare Api链接</a><br/></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Value</th>\n<th align=\"left\">Definition</th>\n<th align=\"center\">Default value</th>\n<th align=\"center\">Maximum value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>Maximum diff patch size</strong></td>\n<td align=\"left\">The total size, in bytes, of the entire diff.</td>\n<td align=\"center\">200 KB</td>\n<td align=\"center\">500 KB</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Maximum diff files</strong></td>\n<td align=\"left\">The total number of files changed in a diff.</td>\n<td align=\"center\">1000</td>\n<td align=\"center\">3000</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Maximum diff lines</strong></td>\n<td align=\"left\">The total number of lines changed in a diff.</td>\n<td align=\"center\">50,000</td>\n<td align=\"center\">100,000</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><a href=\"https://docs.gitlab.com/ee/user/admin_area/diff_limits.html\">gitlab diff limit链接</a></p>\n</blockquote>\n</li>\n<li>解决方案： 采用Jgit本地操作git仓库进行diff比较<h2 id=\"2-java编译提示-Invalid-signature-file-digest-for-Manifest-main-attributes\"><a href=\"#2-java编译提示-Invalid-signature-file-digest-for-Manifest-main-attributes\" class=\"headerlink\" title=\"2. java编译提示 Invalid signature file digest for Manifest main attributes\"></a>2. java编译提示 Invalid signature file digest for Manifest main attributes</h2></li>\n<li>解决方案： 删除jar包中的 *.SF *.DSA  *.RSA文件  </li>\n</ul>\n"},{"title":"nginx 笔记","date":"2021-05-09T16:00:00.000Z","_content":"## 1. 使用docker 方式部署nginx  docker映射端口不一致时无法访问\n- 现象\n  - 访问 http://xxx.com/home/ 带斜杠是正常的， \n  - 访问 http://xxx.com/home 不带斜杠访问时nginx时会进行重定向，导致无法访问\n\n- 原理分析\n  - 当访问的 uri 最后带斜杠时，例如 http://xxx.com/home/，查找 home 下的 index 页面，存在就返回；若不存在且未开启自动索引目录选项（autoindex on）则报 403 错误\n  - 当访问的 uri 最后不带斜杠时，例如 http://xxx.com/home ，会先查找 home 文件，存在就返回；若存在 home 文件夹，会在末尾加上一个斜杠并产生 301 跳转\n  \n- 解决方案\n   - 对不带斜杠的 $uri 精确匹配进行rewrite 到一个可以找到的location\n```\n  listen 7000;\n  location /home {\n              alias /usr/share/nginx/html;\n              index index.html;\n              if ($uri = /home){\n                  rewrite .* /index.html;\n              }\n         }\n  location / {\n              root /usr/share/nginx/html;\n              index index.html;\n         }\n  ```\n","source":"_posts/nginx.md","raw":"---\ntitle: nginx 笔记\ndate: 2021/05/10 00:00:00\n---\n## 1. 使用docker 方式部署nginx  docker映射端口不一致时无法访问\n- 现象\n  - 访问 http://xxx.com/home/ 带斜杠是正常的， \n  - 访问 http://xxx.com/home 不带斜杠访问时nginx时会进行重定向，导致无法访问\n\n- 原理分析\n  - 当访问的 uri 最后带斜杠时，例如 http://xxx.com/home/，查找 home 下的 index 页面，存在就返回；若不存在且未开启自动索引目录选项（autoindex on）则报 403 错误\n  - 当访问的 uri 最后不带斜杠时，例如 http://xxx.com/home ，会先查找 home 文件，存在就返回；若存在 home 文件夹，会在末尾加上一个斜杠并产生 301 跳转\n  \n- 解决方案\n   - 对不带斜杠的 $uri 精确匹配进行rewrite 到一个可以找到的location\n```\n  listen 7000;\n  location /home {\n              alias /usr/share/nginx/html;\n              index index.html;\n              if ($uri = /home){\n                  rewrite .* /index.html;\n              }\n         }\n  location / {\n              root /usr/share/nginx/html;\n              index index.html;\n         }\n  ```\n","slug":"nginx","published":1,"updated":"2021-05-09T16:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhr52drk00019gvt070513rn","content":"<h2 id=\"1-使用docker-方式部署nginx-docker映射端口不一致时无法访问\"><a href=\"#1-使用docker-方式部署nginx-docker映射端口不一致时无法访问\" class=\"headerlink\" title=\"1. 使用docker 方式部署nginx  docker映射端口不一致时无法访问\"></a>1. 使用docker 方式部署nginx  docker映射端口不一致时无法访问</h2><ul>\n<li><p>现象</p>\n<ul>\n<li>访问 <a href=\"http://xxx.com/home/\">http://xxx.com/home/</a> 带斜杠是正常的， </li>\n<li>访问 <a href=\"http://xxx.com/home\">http://xxx.com/home</a> 不带斜杠访问时nginx时会进行重定向，导致无法访问</li>\n</ul>\n</li>\n<li><p>原理分析</p>\n<ul>\n<li>当访问的 uri 最后带斜杠时，例如 <a href=\"http://xxx.com/home/%EF%BC%8C%E6%9F%A5%E6%89%BE\">http://xxx.com/home/，查找</a> home 下的 index 页面，存在就返回；若不存在且未开启自动索引目录选项（autoindex on）则报 403 错误</li>\n<li>当访问的 uri 最后不带斜杠时，例如 <a href=\"http://xxx.com/home\">http://xxx.com/home</a> ，会先查找 home 文件，存在就返回；若存在 home 文件夹，会在末尾加上一个斜杠并产生 301 跳转</li>\n</ul>\n</li>\n<li><p>解决方案</p>\n<ul>\n<li>对不带斜杠的 $uri 精确匹配进行rewrite 到一个可以找到的location<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen 7000;</span><br><span class=\"line\">location /home &#123;</span><br><span class=\"line\">            alias /usr/share/nginx/html;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">            if ($uri = /home)&#123;</span><br><span class=\"line\">                rewrite .* /index.html;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">            root /usr/share/nginx/html;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-使用docker-方式部署nginx-docker映射端口不一致时无法访问\"><a href=\"#1-使用docker-方式部署nginx-docker映射端口不一致时无法访问\" class=\"headerlink\" title=\"1. 使用docker 方式部署nginx  docker映射端口不一致时无法访问\"></a>1. 使用docker 方式部署nginx  docker映射端口不一致时无法访问</h2><ul>\n<li><p>现象</p>\n<ul>\n<li>访问 <a href=\"http://xxx.com/home/\">http://xxx.com/home/</a> 带斜杠是正常的， </li>\n<li>访问 <a href=\"http://xxx.com/home\">http://xxx.com/home</a> 不带斜杠访问时nginx时会进行重定向，导致无法访问</li>\n</ul>\n</li>\n<li><p>原理分析</p>\n<ul>\n<li>当访问的 uri 最后带斜杠时，例如 <a href=\"http://xxx.com/home/%EF%BC%8C%E6%9F%A5%E6%89%BE\">http://xxx.com/home/，查找</a> home 下的 index 页面，存在就返回；若不存在且未开启自动索引目录选项（autoindex on）则报 403 错误</li>\n<li>当访问的 uri 最后不带斜杠时，例如 <a href=\"http://xxx.com/home\">http://xxx.com/home</a> ，会先查找 home 文件，存在就返回；若存在 home 文件夹，会在末尾加上一个斜杠并产生 301 跳转</li>\n</ul>\n</li>\n<li><p>解决方案</p>\n<ul>\n<li>对不带斜杠的 $uri 精确匹配进行rewrite 到一个可以找到的location<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen 7000;</span><br><span class=\"line\">location /home &#123;</span><br><span class=\"line\">            alias /usr/share/nginx/html;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">            if ($uri = /home)&#123;</span><br><span class=\"line\">                rewrite .* /index.html;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">            root /usr/share/nginx/html;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n"},{"title":"jacoco增量代码覆盖率的实现与落地","date":"2021-06-11T16:00:00.000Z","updated":"2023-03-17T02:00:00.000Z","_content":"# 前言\n在产品版本迭代的过程中，测试团队大部分是依据产品设计文档或者需求文档进行用例设计，无论是通过自动化测试的手段还是手工测试的手段去对产品的缺陷进行挖掘，存在以下问题：\n1.  不易得知用例有没有覆盖到该次代码的所有改动点。\n2.  虽然有jacoco现成的全量代码的覆盖率，但是针对于本次的代码改动不直观，不能确认本次的改动用例覆盖了多少，\n增量代码覆盖率的出现解决了这个痛点，赋能团队精准测试的能力。\n\n所谓增量代码覆盖率，即比较两个分支(一般是测试分支和master分支)的代码的diff，将全量代码覆盖率的范围缩小到本次diff涉及到的所有函数方法的颗粒度，非本次code diff设计到的函数方法均被在统计中剔除。\n# 方案设计\n![](https://assets.che300.com/wiki/2021-07-28/16274595821893212.png)\n由于jacoco core模块的代码进行了改造，jacoco-cli.jar需要重新打包\n1. 基于git 的diff功能计算出两个不同分支的差异代码行信息\n2. 通过jdt将diff行数转换为diff函数方法级别\n3. 在jacoco core模块根据 diff函数方法信息 过滤 统计的函数方法范围\n# 差异代码细节\n1. 获取差异代码细节\n     ```java\n    public Map<String, List<MethodInfo>> run_diff(){\n        //通过gitlab接口提取两个分支的差异行数据\n        JSONArray diff_src = git.get_commit_diff(from_commit,to_commit);\n        //序列化成java对象\n        List<DiffInfo> diff = DiffParse.parse(diff_src);\n        //过去没有变化的文件\n        filter(diff);\n        //将diff行信息转换为diff差异信息\n        parse_diff_method(diff);\n        return diff_class_exist_method;\n    }\n    \n    \n    /*\n    *通过gitlab的api获取两个分支的diff详情\n    */\n    public JSONArray get_commit_diff(String from, String to){\n        String uri = \"/api/v4/projects/\" + this.project_id + \"/repository/compare\";\n        Map<String, String> params = new HashMap<>();\n        params.put(\"from\",from);\n        params.put(\"to\",to);\n        JSONObject res = get(uri,params,this.headers);\n        return (JSONArray) res.get(\"diffs\");\n    }\n   \n   \n   \n    /*\n     *序列化数据\n     */\n   public static List<DiffInfo> parse(JSONArray data_array){\n        List<DiffInfo> diffInfos = new ArrayList<>();\n        for (Object data:data_array){\n            JSONObject data1 = (JSONObject) data;\n            DiffInfo diffInfo = new DiffInfo();\n            //设置diff文件地址\n            diffInfo.setFile_path(data1.get(\"new_path\").toString());\n            // 设置diff类型\n            diffInfo.setType(parseDiffType(data1));\n            // 解析diff 行数\n           diffInfo.setLines(parseDiffContent(data1.get(\"diff\").toString()));\n           diffInfos.add(diffInfo);\n        }\n        return diffInfos;\n    }\n    \n    \n     /**\n     * 过滤类型为 空白的、 删除的 diff\n     * 过滤不是java结尾的diff\n     * @param data\n     */\n    private void filter(List<DiffInfo> data){\n        data.removeIf(file -> file.getType() == DiffType.DELETED || file.getType() == DiffType.EMPTY);\n        data.removeIf(file->!file.getFile_path().endsWith(\".java\"));\n    }\n    \n    \n     /**\n     * 将diff出的行数转换成方法\n     * @param data\n     */\n    private void parse_diff_method(List<DiffInfo> data){\n        data.forEach(item ->{\n            String file_path = item.getFile_path();\n            String java_text = git.get_file_content(file_path, to_commit);\n            //ast解析java源码\n            ASTParse ast_parse = new ASTParse(file_path,java_text);\n            List<Integer> diff_lines = item.getLines();\n            //解析出行对应的类\n            List<ClassInfo> diff_tree = ast_parse.parse_code_class();\n            lines_to_method(diff_tree,diff_lines);\n        });\n    ```\n\n2.  jacoco改动源码细节\n      ```java\n      // org/jacoco/cli/internal/commands/Report.java\n    \t/**\n\t * 检查是否为增量代码覆盖\n\t * @return\n\t */\n\tprivate boolean isDiff(PrintWriter out){\n\t\tList<String> stringList = new ArrayList<>(Arrays.asList(gitlabHost,gitlabToken,gitlabProjectId,fromCommit,toCommit));\n\t\treturn stringList.stream().noneMatch(StringUtils::isEmptyOrNull);\n\t}\n\tprivate IBundleCoverage analyze(final ExecutionDataStore data,\n\t\t\tfinal PrintWriter out) throws IOException {\n\t\tfinal CoverageBuilder builder;\n\t\t//判断是否开启增量代码覆盖\n        if (isDiff(out)){\n\t\t\tbuilder = new CoverageBuilder(gitlabHost,gitlabProjectId,gitlabToken,fromCommit,toCommit);\n\t\t\tout.println(\"[!!!INFO] === start deal with Incremental code coverage ===\");\n\t\t}else{\n\t\t\tbuilder = new CoverageBuilder();\n\t\t}\n\t\tfinal Analyzer analyzer = new Analyzer(data, builder);\n\t\tfor (final File f : classfiles) {\n\t\t\tanalyzer.analyzeAll(f);\n\t\t}\n\t\tprintNoMatchWarning(builder.getNoMatchClasses(), out);\n\t\treturn builder.getBundle(name);\n\t}\n\n\n    // org/jacoco/core/analysis/CoverageBuilder.java\n    /**\n\t * 增量代码 new builder\n     * 接受传入的差异信息的相关入参数据\n\t * **/\n\tpublic CoverageBuilder(String host, String project_id, String token, String from_commit, String to_commit) {\n\t\tthis.classes = new HashMap<String, IClassCoverage>();\n\t\tthis.sourcefiles = new HashMap<String, ISourceFileCoverage>();\n\t\tif (classInfos == null || classInfos.isEmpty()){\n\t\t\tDiffMain diffMain = new DiffMain(host, project_id, token, from_commit, to_commit);\n\t\t\tclassInfos = diffMain.run_diff();\n\t\t}\n\t}\n    \n\n    // org/jacoco/core/internal/flow/ClassProbesAdapter.java\n            public final MethodVisitor visitMethod(final int access, final String name,\n                final String desc, final String signature,\n                final String[] exceptions) {\n            final MethodProbesVisitor methodProbes;\n            final MethodProbesVisitor mv = cv.visitMethod(access, name, desc,\n                    signature, exceptions);\n    //\t\tif (mv == null) {\n    //\t\t\t// We need to visit the method in any case, otherwise probe ids\n    //\t\t\t// are not reproducible\n    //\t\t\tmethodProbes = EMPTY_METHOD_PROBES_VISITOR;\n    //\t\t} else {\n    //\t\t\tmethodProbes = mv;\n    //\t\t}\n            //\t增量计算覆盖率\n            if (mv !=null && DiffMain.is_contain_method(this.name,name,desc,CoverageBuilder.classInfos) ) {\n                methodProbes = mv;\n            } else {\n                // We need to visit the method in any case, otherwise probe ids\n                // are not reproducible\n                methodProbes = EMPTY_METHOD_PROBES_VISITOR;\n            }\n            return new MethodSanitizer(null, access, name, desc, signature,\n                    exceptions) {\n\n                @Override\n                public void visitEnd() {\n                    super.visitEnd();\n                    LabelFlowAnalyzer.markLabels(this);\n                    final MethodProbesAdapter probesAdapter = new MethodProbesAdapter(\n                            methodProbes, ClassProbesAdapter.this);\n                    if (trackFrames) {\n                        final AnalyzerAdapter analyzer = new AnalyzerAdapter(\n                                ClassProbesAdapter.this.name, access, name, desc,\n                                probesAdapter);\n                        probesAdapter.setAnalyzer(analyzer);\n                        methodProbes.accept(this, analyzer);\n                    } else {\n                        methodProbes.accept(this, probesAdapter);\n                    }\n                }\n            };\n        }\n        \n        \n        // org/jacoco/core/internal/diff2/DiffMain.java 新增自定义方法\n           public static Boolean is_contain_method(String location, String current_method,String current_method_args,Map<String, List<MethodInfo>> diffs){\n            if (diffs == null){\n                //如果diffs为null走全量覆盖率\n                return true;\n            }\n            if (diffs.containsKey(location)){\n                List<MethodInfo> methods = diffs.get(location);\n                for (MethodInfo method:methods){\n                    // 判断方法是否在diff 类中 选择方法\n                    if (current_method.equals(method.getMethodName())){\n                        return checkArgs(current_method_args,method.getArgs());\n                    }\n                }\n            }\n        return false;\n        }\n\n        /**\n         * 判断参数是否相同，主要通过参数类型以及个数判断\n         * 暂未对返回类型做校验判断，后期可优化\n         * @param current_method_args_src\n         * @param reference_args\n         * @return\n         */\n        private static Boolean checkArgs(String current_method_args_src,List<ArgInfo> reference_args){\n            Type[] current_method_args = Type.getArgumentTypes(current_method_args_src);\n            //判断参数个数是否为空\n            if (current_method_args.length ==0 && reference_args.size() ==0){\n                return true;\n            }\n            if (current_method_args.length == reference_args.size()){\n                //判断参数类型是否相同\n                List<Boolean> is_same_list = new ArrayList<>();\n                for (int i=0;i<current_method_args.length;i++){\n                    Type current_method_arg = current_method_args[i];\n                    String current_method_arg1 = current_method_arg.toString();\n                    String current_method_arg_final;\n                    String reference_arg_type = reference_args.get(i).getType();\n                    String reference_arg_type_final = reference_arg_type;\n                    // Ljava/lang/String;  / 分割 取出类名最后一个\n                    //替换jvm类型为正常类型\n                    if (type_map().containsKey(current_method_arg1)){\n                        //如果 参数类型为jvm短标识\n                        current_method_arg_final = type_map().get(current_method_arg1);\n                    }else {\n                        //标记参数是不是数组\n                        boolean is_array = current_method_arg1.contains(\"[\");\n\n                        String[] current_method_arg2 = current_method_arg1.split(\"/\");\n                        String current_method_arg3 = current_method_arg2[current_method_arg2.length - 1];\n    //                    String current_method_arg4 = current_method_arg3.replace(\";\",\"\");\n                        Pattern pattern = Pattern.compile(\"<.+>|;\"); //去掉空格符合换行符\n                        Matcher matcher = pattern.matcher(current_method_arg3);\n                        String current_method_arg4 = matcher.replaceAll(\"\");\n                        reference_arg_type_final = pattern.matcher(reference_arg_type).replaceAll(\"\");\n                        // 暂不考虑二维数组\n                        if (is_array) {\n                            current_method_arg_final = current_method_arg4 + \"[]\";\n                        }else {\n                            current_method_arg_final = current_method_arg4;\n                        }\n                    }\n                    is_same_list.add(current_method_arg_final.equals(reference_arg_type_final));\n                }\n                return is_same_list.stream().allMatch(f-> f);\n            }\n            return false;\n        }\n    ```\n\n\n# 不足\n- 基于gitlab获取的git diff信息 如果diff内容过大超出gitlab的diff limit限制，diff内容为空。计划用jgit本地操作git仓库获取diff信息\n\n# 后续优化\n- 可以基于原始的业务代码增量覆盖的行数分析受影响的方法，追溯方法影响到的接口，确定本次代码变动受影响接口的覆盖率\n\n# 总结\n1. 增量代码覆盖率可以作为开发自测的准入标准，以确认达到提测标准\n2. 测试人员可以根据增量代码覆盖率去完善自己的测试用例，进一步提升对质量的把控\n3. 搭配全量代码覆盖率作为回归测试的参考，以便完善回归用例覆盖主流程逻辑。\n\n","source":"_posts/jacoco_share.md","raw":"---\ntitle: jacoco增量代码覆盖率的实现与落地\ndate: 2021/6/12 00:00:00\nupdated: 2023/03/17 10:00:00\n---\n# 前言\n在产品版本迭代的过程中，测试团队大部分是依据产品设计文档或者需求文档进行用例设计，无论是通过自动化测试的手段还是手工测试的手段去对产品的缺陷进行挖掘，存在以下问题：\n1.  不易得知用例有没有覆盖到该次代码的所有改动点。\n2.  虽然有jacoco现成的全量代码的覆盖率，但是针对于本次的代码改动不直观，不能确认本次的改动用例覆盖了多少，\n增量代码覆盖率的出现解决了这个痛点，赋能团队精准测试的能力。\n\n所谓增量代码覆盖率，即比较两个分支(一般是测试分支和master分支)的代码的diff，将全量代码覆盖率的范围缩小到本次diff涉及到的所有函数方法的颗粒度，非本次code diff设计到的函数方法均被在统计中剔除。\n# 方案设计\n![](https://assets.che300.com/wiki/2021-07-28/16274595821893212.png)\n由于jacoco core模块的代码进行了改造，jacoco-cli.jar需要重新打包\n1. 基于git 的diff功能计算出两个不同分支的差异代码行信息\n2. 通过jdt将diff行数转换为diff函数方法级别\n3. 在jacoco core模块根据 diff函数方法信息 过滤 统计的函数方法范围\n# 差异代码细节\n1. 获取差异代码细节\n     ```java\n    public Map<String, List<MethodInfo>> run_diff(){\n        //通过gitlab接口提取两个分支的差异行数据\n        JSONArray diff_src = git.get_commit_diff(from_commit,to_commit);\n        //序列化成java对象\n        List<DiffInfo> diff = DiffParse.parse(diff_src);\n        //过去没有变化的文件\n        filter(diff);\n        //将diff行信息转换为diff差异信息\n        parse_diff_method(diff);\n        return diff_class_exist_method;\n    }\n    \n    \n    /*\n    *通过gitlab的api获取两个分支的diff详情\n    */\n    public JSONArray get_commit_diff(String from, String to){\n        String uri = \"/api/v4/projects/\" + this.project_id + \"/repository/compare\";\n        Map<String, String> params = new HashMap<>();\n        params.put(\"from\",from);\n        params.put(\"to\",to);\n        JSONObject res = get(uri,params,this.headers);\n        return (JSONArray) res.get(\"diffs\");\n    }\n   \n   \n   \n    /*\n     *序列化数据\n     */\n   public static List<DiffInfo> parse(JSONArray data_array){\n        List<DiffInfo> diffInfos = new ArrayList<>();\n        for (Object data:data_array){\n            JSONObject data1 = (JSONObject) data;\n            DiffInfo diffInfo = new DiffInfo();\n            //设置diff文件地址\n            diffInfo.setFile_path(data1.get(\"new_path\").toString());\n            // 设置diff类型\n            diffInfo.setType(parseDiffType(data1));\n            // 解析diff 行数\n           diffInfo.setLines(parseDiffContent(data1.get(\"diff\").toString()));\n           diffInfos.add(diffInfo);\n        }\n        return diffInfos;\n    }\n    \n    \n     /**\n     * 过滤类型为 空白的、 删除的 diff\n     * 过滤不是java结尾的diff\n     * @param data\n     */\n    private void filter(List<DiffInfo> data){\n        data.removeIf(file -> file.getType() == DiffType.DELETED || file.getType() == DiffType.EMPTY);\n        data.removeIf(file->!file.getFile_path().endsWith(\".java\"));\n    }\n    \n    \n     /**\n     * 将diff出的行数转换成方法\n     * @param data\n     */\n    private void parse_diff_method(List<DiffInfo> data){\n        data.forEach(item ->{\n            String file_path = item.getFile_path();\n            String java_text = git.get_file_content(file_path, to_commit);\n            //ast解析java源码\n            ASTParse ast_parse = new ASTParse(file_path,java_text);\n            List<Integer> diff_lines = item.getLines();\n            //解析出行对应的类\n            List<ClassInfo> diff_tree = ast_parse.parse_code_class();\n            lines_to_method(diff_tree,diff_lines);\n        });\n    ```\n\n2.  jacoco改动源码细节\n      ```java\n      // org/jacoco/cli/internal/commands/Report.java\n    \t/**\n\t * 检查是否为增量代码覆盖\n\t * @return\n\t */\n\tprivate boolean isDiff(PrintWriter out){\n\t\tList<String> stringList = new ArrayList<>(Arrays.asList(gitlabHost,gitlabToken,gitlabProjectId,fromCommit,toCommit));\n\t\treturn stringList.stream().noneMatch(StringUtils::isEmptyOrNull);\n\t}\n\tprivate IBundleCoverage analyze(final ExecutionDataStore data,\n\t\t\tfinal PrintWriter out) throws IOException {\n\t\tfinal CoverageBuilder builder;\n\t\t//判断是否开启增量代码覆盖\n        if (isDiff(out)){\n\t\t\tbuilder = new CoverageBuilder(gitlabHost,gitlabProjectId,gitlabToken,fromCommit,toCommit);\n\t\t\tout.println(\"[!!!INFO] === start deal with Incremental code coverage ===\");\n\t\t}else{\n\t\t\tbuilder = new CoverageBuilder();\n\t\t}\n\t\tfinal Analyzer analyzer = new Analyzer(data, builder);\n\t\tfor (final File f : classfiles) {\n\t\t\tanalyzer.analyzeAll(f);\n\t\t}\n\t\tprintNoMatchWarning(builder.getNoMatchClasses(), out);\n\t\treturn builder.getBundle(name);\n\t}\n\n\n    // org/jacoco/core/analysis/CoverageBuilder.java\n    /**\n\t * 增量代码 new builder\n     * 接受传入的差异信息的相关入参数据\n\t * **/\n\tpublic CoverageBuilder(String host, String project_id, String token, String from_commit, String to_commit) {\n\t\tthis.classes = new HashMap<String, IClassCoverage>();\n\t\tthis.sourcefiles = new HashMap<String, ISourceFileCoverage>();\n\t\tif (classInfos == null || classInfos.isEmpty()){\n\t\t\tDiffMain diffMain = new DiffMain(host, project_id, token, from_commit, to_commit);\n\t\t\tclassInfos = diffMain.run_diff();\n\t\t}\n\t}\n    \n\n    // org/jacoco/core/internal/flow/ClassProbesAdapter.java\n            public final MethodVisitor visitMethod(final int access, final String name,\n                final String desc, final String signature,\n                final String[] exceptions) {\n            final MethodProbesVisitor methodProbes;\n            final MethodProbesVisitor mv = cv.visitMethod(access, name, desc,\n                    signature, exceptions);\n    //\t\tif (mv == null) {\n    //\t\t\t// We need to visit the method in any case, otherwise probe ids\n    //\t\t\t// are not reproducible\n    //\t\t\tmethodProbes = EMPTY_METHOD_PROBES_VISITOR;\n    //\t\t} else {\n    //\t\t\tmethodProbes = mv;\n    //\t\t}\n            //\t增量计算覆盖率\n            if (mv !=null && DiffMain.is_contain_method(this.name,name,desc,CoverageBuilder.classInfos) ) {\n                methodProbes = mv;\n            } else {\n                // We need to visit the method in any case, otherwise probe ids\n                // are not reproducible\n                methodProbes = EMPTY_METHOD_PROBES_VISITOR;\n            }\n            return new MethodSanitizer(null, access, name, desc, signature,\n                    exceptions) {\n\n                @Override\n                public void visitEnd() {\n                    super.visitEnd();\n                    LabelFlowAnalyzer.markLabels(this);\n                    final MethodProbesAdapter probesAdapter = new MethodProbesAdapter(\n                            methodProbes, ClassProbesAdapter.this);\n                    if (trackFrames) {\n                        final AnalyzerAdapter analyzer = new AnalyzerAdapter(\n                                ClassProbesAdapter.this.name, access, name, desc,\n                                probesAdapter);\n                        probesAdapter.setAnalyzer(analyzer);\n                        methodProbes.accept(this, analyzer);\n                    } else {\n                        methodProbes.accept(this, probesAdapter);\n                    }\n                }\n            };\n        }\n        \n        \n        // org/jacoco/core/internal/diff2/DiffMain.java 新增自定义方法\n           public static Boolean is_contain_method(String location, String current_method,String current_method_args,Map<String, List<MethodInfo>> diffs){\n            if (diffs == null){\n                //如果diffs为null走全量覆盖率\n                return true;\n            }\n            if (diffs.containsKey(location)){\n                List<MethodInfo> methods = diffs.get(location);\n                for (MethodInfo method:methods){\n                    // 判断方法是否在diff 类中 选择方法\n                    if (current_method.equals(method.getMethodName())){\n                        return checkArgs(current_method_args,method.getArgs());\n                    }\n                }\n            }\n        return false;\n        }\n\n        /**\n         * 判断参数是否相同，主要通过参数类型以及个数判断\n         * 暂未对返回类型做校验判断，后期可优化\n         * @param current_method_args_src\n         * @param reference_args\n         * @return\n         */\n        private static Boolean checkArgs(String current_method_args_src,List<ArgInfo> reference_args){\n            Type[] current_method_args = Type.getArgumentTypes(current_method_args_src);\n            //判断参数个数是否为空\n            if (current_method_args.length ==0 && reference_args.size() ==0){\n                return true;\n            }\n            if (current_method_args.length == reference_args.size()){\n                //判断参数类型是否相同\n                List<Boolean> is_same_list = new ArrayList<>();\n                for (int i=0;i<current_method_args.length;i++){\n                    Type current_method_arg = current_method_args[i];\n                    String current_method_arg1 = current_method_arg.toString();\n                    String current_method_arg_final;\n                    String reference_arg_type = reference_args.get(i).getType();\n                    String reference_arg_type_final = reference_arg_type;\n                    // Ljava/lang/String;  / 分割 取出类名最后一个\n                    //替换jvm类型为正常类型\n                    if (type_map().containsKey(current_method_arg1)){\n                        //如果 参数类型为jvm短标识\n                        current_method_arg_final = type_map().get(current_method_arg1);\n                    }else {\n                        //标记参数是不是数组\n                        boolean is_array = current_method_arg1.contains(\"[\");\n\n                        String[] current_method_arg2 = current_method_arg1.split(\"/\");\n                        String current_method_arg3 = current_method_arg2[current_method_arg2.length - 1];\n    //                    String current_method_arg4 = current_method_arg3.replace(\";\",\"\");\n                        Pattern pattern = Pattern.compile(\"<.+>|;\"); //去掉空格符合换行符\n                        Matcher matcher = pattern.matcher(current_method_arg3);\n                        String current_method_arg4 = matcher.replaceAll(\"\");\n                        reference_arg_type_final = pattern.matcher(reference_arg_type).replaceAll(\"\");\n                        // 暂不考虑二维数组\n                        if (is_array) {\n                            current_method_arg_final = current_method_arg4 + \"[]\";\n                        }else {\n                            current_method_arg_final = current_method_arg4;\n                        }\n                    }\n                    is_same_list.add(current_method_arg_final.equals(reference_arg_type_final));\n                }\n                return is_same_list.stream().allMatch(f-> f);\n            }\n            return false;\n        }\n    ```\n\n\n# 不足\n- 基于gitlab获取的git diff信息 如果diff内容过大超出gitlab的diff limit限制，diff内容为空。计划用jgit本地操作git仓库获取diff信息\n\n# 后续优化\n- 可以基于原始的业务代码增量覆盖的行数分析受影响的方法，追溯方法影响到的接口，确定本次代码变动受影响接口的覆盖率\n\n# 总结\n1. 增量代码覆盖率可以作为开发自测的准入标准，以确认达到提测标准\n2. 测试人员可以根据增量代码覆盖率去完善自己的测试用例，进一步提升对质量的把控\n3. 搭配全量代码覆盖率作为回归测试的参考，以便完善回归用例覆盖主流程逻辑。\n\n","slug":"jacoco_share","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clhr52drm00029gvt2lny3q7j","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在产品版本迭代的过程中，测试团队大部分是依据产品设计文档或者需求文档进行用例设计，无论是通过自动化测试的手段还是手工测试的手段去对产品的缺陷进行挖掘，存在以下问题：</p>\n<ol>\n<li> 不易得知用例有没有覆盖到该次代码的所有改动点。</li>\n<li> 虽然有jacoco现成的全量代码的覆盖率，但是针对于本次的代码改动不直观，不能确认本次的改动用例覆盖了多少，<br>增量代码覆盖率的出现解决了这个痛点，赋能团队精准测试的能力。</li>\n</ol>\n<p>所谓增量代码覆盖率，即比较两个分支(一般是测试分支和master分支)的代码的diff，将全量代码覆盖率的范围缩小到本次diff涉及到的所有函数方法的颗粒度，非本次code diff设计到的函数方法均被在统计中剔除。</p>\n<h1 id=\"方案设计\"><a href=\"#方案设计\" class=\"headerlink\" title=\"方案设计\"></a>方案设计</h1><p><img src=\"https://assets.che300.com/wiki/2021-07-28/16274595821893212.png\"><br>由于jacoco core模块的代码进行了改造，jacoco-cli.jar需要重新打包</p>\n<ol>\n<li><p>基于git 的diff功能计算出两个不同分支的差异代码行信息</p>\n</li>\n<li><p>通过jdt将diff行数转换为diff函数方法级别</p>\n</li>\n<li><p>在jacoco core模块根据 diff函数方法信息 过滤 统计的函数方法范围</p>\n<h1 id=\"差异代码细节\"><a href=\"#差异代码细节\" class=\"headerlink\" title=\"差异代码细节\"></a>差异代码细节</h1></li>\n<li><p>获取差异代码细节</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> Map&lt;String, List&lt;MethodInfo&gt;&gt; <span class=\"title function_\">run_diff</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//通过gitlab接口提取两个分支的差异行数据</span></span><br><span class=\"line\">     <span class=\"type\">JSONArray</span> <span class=\"variable\">diff_src</span> <span class=\"operator\">=</span> git.get_commit_diff(from_commit,to_commit);</span><br><span class=\"line\">     <span class=\"comment\">//序列化成java对象</span></span><br><span class=\"line\">     List&lt;DiffInfo&gt; diff = DiffParse.parse(diff_src);</span><br><span class=\"line\">     <span class=\"comment\">//过去没有变化的文件</span></span><br><span class=\"line\">     filter(diff);</span><br><span class=\"line\">     <span class=\"comment\">//将diff行信息转换为diff差异信息</span></span><br><span class=\"line\">     parse_diff_method(diff);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> diff_class_exist_method;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *通过gitlab的api获取两个分支的diff详情</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> JSONArray <span class=\"title function_\">get_commit_diff</span><span class=\"params\">(String from, String to)</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">uri</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/api/v4/projects/&quot;</span> + <span class=\"built_in\">this</span>.project_id + <span class=\"string\">&quot;/repository/compare&quot;</span>;</span><br><span class=\"line\">     Map&lt;String, String&gt; params = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">     params.put(<span class=\"string\">&quot;from&quot;</span>,from);</span><br><span class=\"line\">     params.put(<span class=\"string\">&quot;to&quot;</span>,to);</span><br><span class=\"line\">     <span class=\"type\">JSONObject</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> get(uri,params,<span class=\"built_in\">this</span>.headers);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (JSONArray) res.get(<span class=\"string\">&quot;diffs&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  *序列化数据</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;DiffInfo&gt; <span class=\"title function_\">parse</span><span class=\"params\">(JSONArray data_array)</span>&#123;</span><br><span class=\"line\">     List&lt;DiffInfo&gt; diffInfos = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (Object data:data_array)&#123;</span><br><span class=\"line\">         <span class=\"type\">JSONObject</span> <span class=\"variable\">data1</span> <span class=\"operator\">=</span> (JSONObject) data;</span><br><span class=\"line\">         <span class=\"type\">DiffInfo</span> <span class=\"variable\">diffInfo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DiffInfo</span>();</span><br><span class=\"line\">         <span class=\"comment\">//设置diff文件地址</span></span><br><span class=\"line\">         diffInfo.setFile_path(data1.get(<span class=\"string\">&quot;new_path&quot;</span>).toString());</span><br><span class=\"line\">         <span class=\"comment\">// 设置diff类型</span></span><br><span class=\"line\">         diffInfo.setType(parseDiffType(data1));</span><br><span class=\"line\">         <span class=\"comment\">// 解析diff 行数</span></span><br><span class=\"line\">        diffInfo.setLines(parseDiffContent(data1.get(<span class=\"string\">&quot;diff&quot;</span>).toString()));</span><br><span class=\"line\">        diffInfos.add(diffInfo);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> diffInfos;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 过滤类型为 空白的、 删除的 diff</span></span><br><span class=\"line\"><span class=\"comment\">  * 过滤不是java结尾的diff</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> data</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">filter</span><span class=\"params\">(List&lt;DiffInfo&gt; data)</span>&#123;</span><br><span class=\"line\">     data.removeIf(file -&gt; file.getType() == DiffType.DELETED || file.getType() == DiffType.EMPTY);</span><br><span class=\"line\">     data.removeIf(file-&gt;!file.getFile_path().endsWith(<span class=\"string\">&quot;.java&quot;</span>));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 将diff出的行数转换成方法</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> data</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parse_diff_method</span><span class=\"params\">(List&lt;DiffInfo&gt; data)</span>&#123;</span><br><span class=\"line\">     data.forEach(item -&gt;&#123;</span><br><span class=\"line\">         <span class=\"type\">String</span> <span class=\"variable\">file_path</span> <span class=\"operator\">=</span> item.getFile_path();</span><br><span class=\"line\">         <span class=\"type\">String</span> <span class=\"variable\">java_text</span> <span class=\"operator\">=</span> git.get_file_content(file_path, to_commit);</span><br><span class=\"line\">         <span class=\"comment\">//ast解析java源码</span></span><br><span class=\"line\">         <span class=\"type\">ASTParse</span> <span class=\"variable\">ast_parse</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ASTParse</span>(file_path,java_text);</span><br><span class=\"line\">         List&lt;Integer&gt; diff_lines = item.getLines();</span><br><span class=\"line\">         <span class=\"comment\">//解析出行对应的类</span></span><br><span class=\"line\">         List&lt;ClassInfo&gt; diff_tree = ast_parse.parse_code_class();</span><br><span class=\"line\">         lines_to_method(diff_tree,diff_lines);</span><br><span class=\"line\">     &#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>jacoco改动源码细节</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">// org/jacoco/cli/internal/commands/Report.java</span></span><br><span class=\"line\">   \t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查是否为增量代码覆盖</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isDiff</span><span class=\"params\">(PrintWriter out)</span>&#123;</span><br><span class=\"line\">\tList&lt;String&gt; stringList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(gitlabHost,gitlabToken,gitlabProjectId,fromCommit,toCommit));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> stringList.stream().noneMatch(StringUtils::isEmptyOrNull);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> IBundleCoverage <span class=\"title function_\">analyze</span><span class=\"params\">(<span class=\"keyword\">final</span> ExecutionDataStore data,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">final</span> PrintWriter out)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> CoverageBuilder builder;</span><br><span class=\"line\">\t<span class=\"comment\">//判断是否开启增量代码覆盖</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (isDiff(out))&#123;</span><br><span class=\"line\">\t\tbuilder = <span class=\"keyword\">new</span> <span class=\"title class_\">CoverageBuilder</span>(gitlabHost,gitlabProjectId,gitlabToken,fromCommit,toCommit);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;[!!!INFO] === start deal with Incremental code coverage ===&quot;</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tbuilder = <span class=\"keyword\">new</span> <span class=\"title class_\">CoverageBuilder</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"type\">Analyzer</span> <span class=\"variable\">analyzer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Analyzer</span>(data, builder);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> File f : classfiles) &#123;</span><br><span class=\"line\">\t\tanalyzer.analyzeAll(f);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintNoMatchWarning(builder.getNoMatchClasses(), out);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> builder.getBundle(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// org/jacoco/core/analysis/CoverageBuilder.java</span></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 增量代码 new builder</span></span><br><span class=\"line\"><span class=\"comment\">    * 接受传入的差异信息的相关入参数据</span></span><br><span class=\"line\"><span class=\"comment\"> * **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">CoverageBuilder</span><span class=\"params\">(String host, String project_id, String token, String from_commit, String to_commit)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.classes = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String, IClassCoverage&gt;();</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.sourcefiles = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String, ISourceFileCoverage&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (classInfos == <span class=\"literal\">null</span> || classInfos.isEmpty())&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">DiffMain</span> <span class=\"variable\">diffMain</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DiffMain</span>(host, project_id, token, from_commit, to_commit);</span><br><span class=\"line\">\t\tclassInfos = diffMain.run_diff();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// org/jacoco/core/internal/flow/ClassProbesAdapter.java</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> MethodVisitor <span class=\"title function_\">visitMethod</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">int</span> access, <span class=\"keyword\">final</span> String name,</span></span><br><span class=\"line\"><span class=\"params\">               <span class=\"keyword\">final</span> String desc, <span class=\"keyword\">final</span> String signature,</span></span><br><span class=\"line\"><span class=\"params\">               <span class=\"keyword\">final</span> String[] exceptions)</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> MethodProbesVisitor methodProbes;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> <span class=\"type\">MethodProbesVisitor</span> <span class=\"variable\">mv</span> <span class=\"operator\">=</span> cv.visitMethod(access, name, desc,</span><br><span class=\"line\">                   signature, exceptions);</span><br><span class=\"line\">   <span class=\"comment\">//\t\tif (mv == null) &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">//\t\t\t// We need to visit the method in any case, otherwise probe ids</span></span><br><span class=\"line\">   <span class=\"comment\">//\t\t\t// are not reproducible</span></span><br><span class=\"line\">   <span class=\"comment\">//\t\t\tmethodProbes = EMPTY_METHOD_PROBES_VISITOR;</span></span><br><span class=\"line\">   <span class=\"comment\">//\t\t&#125; else &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">//\t\t\tmethodProbes = mv;</span></span><br><span class=\"line\">   <span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\">           <span class=\"comment\">//\t增量计算覆盖率</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (mv !=<span class=\"literal\">null</span> &amp;&amp; DiffMain.is_contain_method(<span class=\"built_in\">this</span>.name,name,desc,CoverageBuilder.classInfos) ) &#123;</span><br><span class=\"line\">               methodProbes = mv;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">// We need to visit the method in any case, otherwise probe ids</span></span><br><span class=\"line\">               <span class=\"comment\">// are not reproducible</span></span><br><span class=\"line\">               methodProbes = EMPTY_METHOD_PROBES_VISITOR;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MethodSanitizer</span>(<span class=\"literal\">null</span>, access, name, desc, signature,</span><br><span class=\"line\">                   exceptions) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"meta\">@Override</span></span><br><span class=\"line\">               <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visitEnd</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                   <span class=\"built_in\">super</span>.visitEnd();</span><br><span class=\"line\">                   LabelFlowAnalyzer.markLabels(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">                   <span class=\"keyword\">final</span> <span class=\"type\">MethodProbesAdapter</span> <span class=\"variable\">probesAdapter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MethodProbesAdapter</span>(</span><br><span class=\"line\">                           methodProbes, ClassProbesAdapter.<span class=\"built_in\">this</span>);</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (trackFrames) &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">final</span> <span class=\"type\">AnalyzerAdapter</span> <span class=\"variable\">analyzer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnalyzerAdapter</span>(</span><br><span class=\"line\">                               ClassProbesAdapter.<span class=\"built_in\">this</span>.name, access, name, desc,</span><br><span class=\"line\">                               probesAdapter);</span><br><span class=\"line\">                       probesAdapter.setAnalyzer(analyzer);</span><br><span class=\"line\">                       methodProbes.accept(<span class=\"built_in\">this</span>, analyzer);</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                       methodProbes.accept(<span class=\"built_in\">this</span>, probesAdapter);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// org/jacoco/core/internal/diff2/DiffMain.java 新增自定义方法</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Boolean <span class=\"title function_\">is_contain_method</span><span class=\"params\">(String location, String current_method,String current_method_args,Map&lt;String, List&lt;MethodInfo&gt;&gt; diffs)</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (diffs == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">               <span class=\"comment\">//如果diffs为null走全量覆盖率</span></span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (diffs.containsKey(location))&#123;</span><br><span class=\"line\">               List&lt;MethodInfo&gt; methods = diffs.get(location);</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (MethodInfo method:methods)&#123;</span><br><span class=\"line\">                   <span class=\"comment\">// 判断方法是否在diff 类中 选择方法</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (current_method.equals(method.getMethodName()))&#123;</span><br><span class=\"line\">                       <span class=\"keyword\">return</span> checkArgs(current_method_args,method.getArgs());</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 判断参数是否相同，主要通过参数类型以及个数判断</span></span><br><span class=\"line\"><span class=\"comment\">        * 暂未对返回类型做校验判断，后期可优化</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@param</span> current_method_args_src</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@param</span> reference_args</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Boolean <span class=\"title function_\">checkArgs</span><span class=\"params\">(String current_method_args_src,List&lt;ArgInfo&gt; reference_args)</span>&#123;</span><br><span class=\"line\">           Type[] current_method_args = Type.getArgumentTypes(current_method_args_src);</span><br><span class=\"line\">           <span class=\"comment\">//判断参数个数是否为空</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (current_method_args.length ==<span class=\"number\">0</span> &amp;&amp; reference_args.size() ==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (current_method_args.length == reference_args.size())&#123;</span><br><span class=\"line\">               <span class=\"comment\">//判断参数类型是否相同</span></span><br><span class=\"line\">               List&lt;Boolean&gt; is_same_list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;current_method_args.length;i++)&#123;</span><br><span class=\"line\">                   <span class=\"type\">Type</span> <span class=\"variable\">current_method_arg</span> <span class=\"operator\">=</span> current_method_args[i];</span><br><span class=\"line\">                   <span class=\"type\">String</span> <span class=\"variable\">current_method_arg1</span> <span class=\"operator\">=</span> current_method_arg.toString();</span><br><span class=\"line\">                   String current_method_arg_final;</span><br><span class=\"line\">                   <span class=\"type\">String</span> <span class=\"variable\">reference_arg_type</span> <span class=\"operator\">=</span> reference_args.get(i).getType();</span><br><span class=\"line\">                   <span class=\"type\">String</span> <span class=\"variable\">reference_arg_type_final</span> <span class=\"operator\">=</span> reference_arg_type;</span><br><span class=\"line\">                   <span class=\"comment\">// Ljava/lang/String;  / 分割 取出类名最后一个</span></span><br><span class=\"line\">                   <span class=\"comment\">//替换jvm类型为正常类型</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (type_map().containsKey(current_method_arg1))&#123;</span><br><span class=\"line\">                       <span class=\"comment\">//如果 参数类型为jvm短标识</span></span><br><span class=\"line\">                       current_method_arg_final = type_map().get(current_method_arg1);</span><br><span class=\"line\">                   &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                       <span class=\"comment\">//标记参数是不是数组</span></span><br><span class=\"line\">                       <span class=\"type\">boolean</span> <span class=\"variable\">is_array</span> <span class=\"operator\">=</span> current_method_arg1.contains(<span class=\"string\">&quot;[&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                       String[] current_method_arg2 = current_method_arg1.split(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">                       <span class=\"type\">String</span> <span class=\"variable\">current_method_arg3</span> <span class=\"operator\">=</span> current_method_arg2[current_method_arg2.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">   <span class=\"comment\">//                    String current_method_arg4 = current_method_arg3.replace(&quot;;&quot;,&quot;&quot;);</span></span><br><span class=\"line\">                       <span class=\"type\">Pattern</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> Pattern.compile(<span class=\"string\">&quot;&lt;.+&gt;|;&quot;</span>); <span class=\"comment\">//去掉空格符合换行符</span></span><br><span class=\"line\">                       <span class=\"type\">Matcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> pattern.matcher(current_method_arg3);</span><br><span class=\"line\">                       <span class=\"type\">String</span> <span class=\"variable\">current_method_arg4</span> <span class=\"operator\">=</span> matcher.replaceAll(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">                       reference_arg_type_final = pattern.matcher(reference_arg_type).replaceAll(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">                       <span class=\"comment\">// 暂不考虑二维数组</span></span><br><span class=\"line\">                       <span class=\"keyword\">if</span> (is_array) &#123;</span><br><span class=\"line\">                           current_method_arg_final = current_method_arg4 + <span class=\"string\">&quot;[]&quot;</span>;</span><br><span class=\"line\">                       &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                           current_method_arg_final = current_method_arg4;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   is_same_list.add(current_method_arg_final.equals(reference_arg_type_final));</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> is_same_list.stream().allMatch(f-&gt; f);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h1><ul>\n<li>基于gitlab获取的git diff信息 如果diff内容过大超出gitlab的diff limit限制，diff内容为空。计划用jgit本地操作git仓库获取diff信息</li>\n</ul>\n<h1 id=\"后续优化\"><a href=\"#后续优化\" class=\"headerlink\" title=\"后续优化\"></a>后续优化</h1><ul>\n<li>可以基于原始的业务代码增量覆盖的行数分析受影响的方法，追溯方法影响到的接口，确定本次代码变动受影响接口的覆盖率</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>增量代码覆盖率可以作为开发自测的准入标准，以确认达到提测标准</li>\n<li>测试人员可以根据增量代码覆盖率去完善自己的测试用例，进一步提升对质量的把控</li>\n<li>搭配全量代码覆盖率作为回归测试的参考，以便完善回归用例覆盖主流程逻辑。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在产品版本迭代的过程中，测试团队大部分是依据产品设计文档或者需求文档进行用例设计，无论是通过自动化测试的手段还是手工测试的手段去对产品的缺陷进行挖掘，存在以下问题：</p>\n<ol>\n<li> 不易得知用例有没有覆盖到该次代码的所有改动点。</li>\n<li> 虽然有jacoco现成的全量代码的覆盖率，但是针对于本次的代码改动不直观，不能确认本次的改动用例覆盖了多少，<br>增量代码覆盖率的出现解决了这个痛点，赋能团队精准测试的能力。</li>\n</ol>\n<p>所谓增量代码覆盖率，即比较两个分支(一般是测试分支和master分支)的代码的diff，将全量代码覆盖率的范围缩小到本次diff涉及到的所有函数方法的颗粒度，非本次code diff设计到的函数方法均被在统计中剔除。</p>\n<h1 id=\"方案设计\"><a href=\"#方案设计\" class=\"headerlink\" title=\"方案设计\"></a>方案设计</h1><p><img src=\"https://assets.che300.com/wiki/2021-07-28/16274595821893212.png\"><br>由于jacoco core模块的代码进行了改造，jacoco-cli.jar需要重新打包</p>\n<ol>\n<li><p>基于git 的diff功能计算出两个不同分支的差异代码行信息</p>\n</li>\n<li><p>通过jdt将diff行数转换为diff函数方法级别</p>\n</li>\n<li><p>在jacoco core模块根据 diff函数方法信息 过滤 统计的函数方法范围</p>\n<h1 id=\"差异代码细节\"><a href=\"#差异代码细节\" class=\"headerlink\" title=\"差异代码细节\"></a>差异代码细节</h1></li>\n<li><p>获取差异代码细节</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> Map&lt;String, List&lt;MethodInfo&gt;&gt; <span class=\"title function_\">run_diff</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//通过gitlab接口提取两个分支的差异行数据</span></span><br><span class=\"line\">     <span class=\"type\">JSONArray</span> <span class=\"variable\">diff_src</span> <span class=\"operator\">=</span> git.get_commit_diff(from_commit,to_commit);</span><br><span class=\"line\">     <span class=\"comment\">//序列化成java对象</span></span><br><span class=\"line\">     List&lt;DiffInfo&gt; diff = DiffParse.parse(diff_src);</span><br><span class=\"line\">     <span class=\"comment\">//过去没有变化的文件</span></span><br><span class=\"line\">     filter(diff);</span><br><span class=\"line\">     <span class=\"comment\">//将diff行信息转换为diff差异信息</span></span><br><span class=\"line\">     parse_diff_method(diff);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> diff_class_exist_method;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *通过gitlab的api获取两个分支的diff详情</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> JSONArray <span class=\"title function_\">get_commit_diff</span><span class=\"params\">(String from, String to)</span>&#123;</span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">uri</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/api/v4/projects/&quot;</span> + <span class=\"built_in\">this</span>.project_id + <span class=\"string\">&quot;/repository/compare&quot;</span>;</span><br><span class=\"line\">     Map&lt;String, String&gt; params = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">     params.put(<span class=\"string\">&quot;from&quot;</span>,from);</span><br><span class=\"line\">     params.put(<span class=\"string\">&quot;to&quot;</span>,to);</span><br><span class=\"line\">     <span class=\"type\">JSONObject</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> get(uri,params,<span class=\"built_in\">this</span>.headers);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (JSONArray) res.get(<span class=\"string\">&quot;diffs&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  *序列化数据</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;DiffInfo&gt; <span class=\"title function_\">parse</span><span class=\"params\">(JSONArray data_array)</span>&#123;</span><br><span class=\"line\">     List&lt;DiffInfo&gt; diffInfos = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (Object data:data_array)&#123;</span><br><span class=\"line\">         <span class=\"type\">JSONObject</span> <span class=\"variable\">data1</span> <span class=\"operator\">=</span> (JSONObject) data;</span><br><span class=\"line\">         <span class=\"type\">DiffInfo</span> <span class=\"variable\">diffInfo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DiffInfo</span>();</span><br><span class=\"line\">         <span class=\"comment\">//设置diff文件地址</span></span><br><span class=\"line\">         diffInfo.setFile_path(data1.get(<span class=\"string\">&quot;new_path&quot;</span>).toString());</span><br><span class=\"line\">         <span class=\"comment\">// 设置diff类型</span></span><br><span class=\"line\">         diffInfo.setType(parseDiffType(data1));</span><br><span class=\"line\">         <span class=\"comment\">// 解析diff 行数</span></span><br><span class=\"line\">        diffInfo.setLines(parseDiffContent(data1.get(<span class=\"string\">&quot;diff&quot;</span>).toString()));</span><br><span class=\"line\">        diffInfos.add(diffInfo);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> diffInfos;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 过滤类型为 空白的、 删除的 diff</span></span><br><span class=\"line\"><span class=\"comment\">  * 过滤不是java结尾的diff</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> data</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">filter</span><span class=\"params\">(List&lt;DiffInfo&gt; data)</span>&#123;</span><br><span class=\"line\">     data.removeIf(file -&gt; file.getType() == DiffType.DELETED || file.getType() == DiffType.EMPTY);</span><br><span class=\"line\">     data.removeIf(file-&gt;!file.getFile_path().endsWith(<span class=\"string\">&quot;.java&quot;</span>));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 将diff出的行数转换成方法</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> data</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parse_diff_method</span><span class=\"params\">(List&lt;DiffInfo&gt; data)</span>&#123;</span><br><span class=\"line\">     data.forEach(item -&gt;&#123;</span><br><span class=\"line\">         <span class=\"type\">String</span> <span class=\"variable\">file_path</span> <span class=\"operator\">=</span> item.getFile_path();</span><br><span class=\"line\">         <span class=\"type\">String</span> <span class=\"variable\">java_text</span> <span class=\"operator\">=</span> git.get_file_content(file_path, to_commit);</span><br><span class=\"line\">         <span class=\"comment\">//ast解析java源码</span></span><br><span class=\"line\">         <span class=\"type\">ASTParse</span> <span class=\"variable\">ast_parse</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ASTParse</span>(file_path,java_text);</span><br><span class=\"line\">         List&lt;Integer&gt; diff_lines = item.getLines();</span><br><span class=\"line\">         <span class=\"comment\">//解析出行对应的类</span></span><br><span class=\"line\">         List&lt;ClassInfo&gt; diff_tree = ast_parse.parse_code_class();</span><br><span class=\"line\">         lines_to_method(diff_tree,diff_lines);</span><br><span class=\"line\">     &#125;);</span><br></pre></td></tr></table></figure></li>\n<li><p>jacoco改动源码细节</p>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">// org/jacoco/cli/internal/commands/Report.java</span></span><br><span class=\"line\">   \t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查是否为增量代码覆盖</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isDiff</span><span class=\"params\">(PrintWriter out)</span>&#123;</span><br><span class=\"line\">\tList&lt;String&gt; stringList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(gitlabHost,gitlabToken,gitlabProjectId,fromCommit,toCommit));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> stringList.stream().noneMatch(StringUtils::isEmptyOrNull);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> IBundleCoverage <span class=\"title function_\">analyze</span><span class=\"params\">(<span class=\"keyword\">final</span> ExecutionDataStore data,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">final</span> PrintWriter out)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> CoverageBuilder builder;</span><br><span class=\"line\">\t<span class=\"comment\">//判断是否开启增量代码覆盖</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (isDiff(out))&#123;</span><br><span class=\"line\">\t\tbuilder = <span class=\"keyword\">new</span> <span class=\"title class_\">CoverageBuilder</span>(gitlabHost,gitlabProjectId,gitlabToken,fromCommit,toCommit);</span><br><span class=\"line\">\t\tout.println(<span class=\"string\">&quot;[!!!INFO] === start deal with Incremental code coverage ===&quot;</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tbuilder = <span class=\"keyword\">new</span> <span class=\"title class_\">CoverageBuilder</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"type\">Analyzer</span> <span class=\"variable\">analyzer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Analyzer</span>(data, builder);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> File f : classfiles) &#123;</span><br><span class=\"line\">\t\tanalyzer.analyzeAll(f);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintNoMatchWarning(builder.getNoMatchClasses(), out);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> builder.getBundle(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// org/jacoco/core/analysis/CoverageBuilder.java</span></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 增量代码 new builder</span></span><br><span class=\"line\"><span class=\"comment\">    * 接受传入的差异信息的相关入参数据</span></span><br><span class=\"line\"><span class=\"comment\"> * **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">CoverageBuilder</span><span class=\"params\">(String host, String project_id, String token, String from_commit, String to_commit)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.classes = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String, IClassCoverage&gt;();</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.sourcefiles = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String, ISourceFileCoverage&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (classInfos == <span class=\"literal\">null</span> || classInfos.isEmpty())&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">DiffMain</span> <span class=\"variable\">diffMain</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DiffMain</span>(host, project_id, token, from_commit, to_commit);</span><br><span class=\"line\">\t\tclassInfos = diffMain.run_diff();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// org/jacoco/core/internal/flow/ClassProbesAdapter.java</span></span><br><span class=\"line\">           <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> MethodVisitor <span class=\"title function_\">visitMethod</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">int</span> access, <span class=\"keyword\">final</span> String name,</span></span><br><span class=\"line\"><span class=\"params\">               <span class=\"keyword\">final</span> String desc, <span class=\"keyword\">final</span> String signature,</span></span><br><span class=\"line\"><span class=\"params\">               <span class=\"keyword\">final</span> String[] exceptions)</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> MethodProbesVisitor methodProbes;</span><br><span class=\"line\">           <span class=\"keyword\">final</span> <span class=\"type\">MethodProbesVisitor</span> <span class=\"variable\">mv</span> <span class=\"operator\">=</span> cv.visitMethod(access, name, desc,</span><br><span class=\"line\">                   signature, exceptions);</span><br><span class=\"line\">   <span class=\"comment\">//\t\tif (mv == null) &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">//\t\t\t// We need to visit the method in any case, otherwise probe ids</span></span><br><span class=\"line\">   <span class=\"comment\">//\t\t\t// are not reproducible</span></span><br><span class=\"line\">   <span class=\"comment\">//\t\t\tmethodProbes = EMPTY_METHOD_PROBES_VISITOR;</span></span><br><span class=\"line\">   <span class=\"comment\">//\t\t&#125; else &#123;</span></span><br><span class=\"line\">   <span class=\"comment\">//\t\t\tmethodProbes = mv;</span></span><br><span class=\"line\">   <span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\">           <span class=\"comment\">//\t增量计算覆盖率</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (mv !=<span class=\"literal\">null</span> &amp;&amp; DiffMain.is_contain_method(<span class=\"built_in\">this</span>.name,name,desc,CoverageBuilder.classInfos) ) &#123;</span><br><span class=\"line\">               methodProbes = mv;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">// We need to visit the method in any case, otherwise probe ids</span></span><br><span class=\"line\">               <span class=\"comment\">// are not reproducible</span></span><br><span class=\"line\">               methodProbes = EMPTY_METHOD_PROBES_VISITOR;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MethodSanitizer</span>(<span class=\"literal\">null</span>, access, name, desc, signature,</span><br><span class=\"line\">                   exceptions) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"meta\">@Override</span></span><br><span class=\"line\">               <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visitEnd</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                   <span class=\"built_in\">super</span>.visitEnd();</span><br><span class=\"line\">                   LabelFlowAnalyzer.markLabels(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">                   <span class=\"keyword\">final</span> <span class=\"type\">MethodProbesAdapter</span> <span class=\"variable\">probesAdapter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MethodProbesAdapter</span>(</span><br><span class=\"line\">                           methodProbes, ClassProbesAdapter.<span class=\"built_in\">this</span>);</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (trackFrames) &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">final</span> <span class=\"type\">AnalyzerAdapter</span> <span class=\"variable\">analyzer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnalyzerAdapter</span>(</span><br><span class=\"line\">                               ClassProbesAdapter.<span class=\"built_in\">this</span>.name, access, name, desc,</span><br><span class=\"line\">                               probesAdapter);</span><br><span class=\"line\">                       probesAdapter.setAnalyzer(analyzer);</span><br><span class=\"line\">                       methodProbes.accept(<span class=\"built_in\">this</span>, analyzer);</span><br><span class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                       methodProbes.accept(<span class=\"built_in\">this</span>, probesAdapter);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// org/jacoco/core/internal/diff2/DiffMain.java 新增自定义方法</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Boolean <span class=\"title function_\">is_contain_method</span><span class=\"params\">(String location, String current_method,String current_method_args,Map&lt;String, List&lt;MethodInfo&gt;&gt; diffs)</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (diffs == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">               <span class=\"comment\">//如果diffs为null走全量覆盖率</span></span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (diffs.containsKey(location))&#123;</span><br><span class=\"line\">               List&lt;MethodInfo&gt; methods = diffs.get(location);</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (MethodInfo method:methods)&#123;</span><br><span class=\"line\">                   <span class=\"comment\">// 判断方法是否在diff 类中 选择方法</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (current_method.equals(method.getMethodName()))&#123;</span><br><span class=\"line\">                       <span class=\"keyword\">return</span> checkArgs(current_method_args,method.getArgs());</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 判断参数是否相同，主要通过参数类型以及个数判断</span></span><br><span class=\"line\"><span class=\"comment\">        * 暂未对返回类型做校验判断，后期可优化</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@param</span> current_method_args_src</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@param</span> reference_args</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Boolean <span class=\"title function_\">checkArgs</span><span class=\"params\">(String current_method_args_src,List&lt;ArgInfo&gt; reference_args)</span>&#123;</span><br><span class=\"line\">           Type[] current_method_args = Type.getArgumentTypes(current_method_args_src);</span><br><span class=\"line\">           <span class=\"comment\">//判断参数个数是否为空</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (current_method_args.length ==<span class=\"number\">0</span> &amp;&amp; reference_args.size() ==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (current_method_args.length == reference_args.size())&#123;</span><br><span class=\"line\">               <span class=\"comment\">//判断参数类型是否相同</span></span><br><span class=\"line\">               List&lt;Boolean&gt; is_same_list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;current_method_args.length;i++)&#123;</span><br><span class=\"line\">                   <span class=\"type\">Type</span> <span class=\"variable\">current_method_arg</span> <span class=\"operator\">=</span> current_method_args[i];</span><br><span class=\"line\">                   <span class=\"type\">String</span> <span class=\"variable\">current_method_arg1</span> <span class=\"operator\">=</span> current_method_arg.toString();</span><br><span class=\"line\">                   String current_method_arg_final;</span><br><span class=\"line\">                   <span class=\"type\">String</span> <span class=\"variable\">reference_arg_type</span> <span class=\"operator\">=</span> reference_args.get(i).getType();</span><br><span class=\"line\">                   <span class=\"type\">String</span> <span class=\"variable\">reference_arg_type_final</span> <span class=\"operator\">=</span> reference_arg_type;</span><br><span class=\"line\">                   <span class=\"comment\">// Ljava/lang/String;  / 分割 取出类名最后一个</span></span><br><span class=\"line\">                   <span class=\"comment\">//替换jvm类型为正常类型</span></span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (type_map().containsKey(current_method_arg1))&#123;</span><br><span class=\"line\">                       <span class=\"comment\">//如果 参数类型为jvm短标识</span></span><br><span class=\"line\">                       current_method_arg_final = type_map().get(current_method_arg1);</span><br><span class=\"line\">                   &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                       <span class=\"comment\">//标记参数是不是数组</span></span><br><span class=\"line\">                       <span class=\"type\">boolean</span> <span class=\"variable\">is_array</span> <span class=\"operator\">=</span> current_method_arg1.contains(<span class=\"string\">&quot;[&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                       String[] current_method_arg2 = current_method_arg1.split(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">                       <span class=\"type\">String</span> <span class=\"variable\">current_method_arg3</span> <span class=\"operator\">=</span> current_method_arg2[current_method_arg2.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">   <span class=\"comment\">//                    String current_method_arg4 = current_method_arg3.replace(&quot;;&quot;,&quot;&quot;);</span></span><br><span class=\"line\">                       <span class=\"type\">Pattern</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> Pattern.compile(<span class=\"string\">&quot;&lt;.+&gt;|;&quot;</span>); <span class=\"comment\">//去掉空格符合换行符</span></span><br><span class=\"line\">                       <span class=\"type\">Matcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> pattern.matcher(current_method_arg3);</span><br><span class=\"line\">                       <span class=\"type\">String</span> <span class=\"variable\">current_method_arg4</span> <span class=\"operator\">=</span> matcher.replaceAll(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">                       reference_arg_type_final = pattern.matcher(reference_arg_type).replaceAll(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">                       <span class=\"comment\">// 暂不考虑二维数组</span></span><br><span class=\"line\">                       <span class=\"keyword\">if</span> (is_array) &#123;</span><br><span class=\"line\">                           current_method_arg_final = current_method_arg4 + <span class=\"string\">&quot;[]&quot;</span>;</span><br><span class=\"line\">                       &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                           current_method_arg_final = current_method_arg4;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   is_same_list.add(current_method_arg_final.equals(reference_arg_type_final));</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> is_same_list.stream().allMatch(f-&gt; f);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h1><ul>\n<li>基于gitlab获取的git diff信息 如果diff内容过大超出gitlab的diff limit限制，diff内容为空。计划用jgit本地操作git仓库获取diff信息</li>\n</ul>\n<h1 id=\"后续优化\"><a href=\"#后续优化\" class=\"headerlink\" title=\"后续优化\"></a>后续优化</h1><ul>\n<li>可以基于原始的业务代码增量覆盖的行数分析受影响的方法，追溯方法影响到的接口，确定本次代码变动受影响接口的覆盖率</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>增量代码覆盖率可以作为开发自测的准入标准，以确认达到提测标准</li>\n<li>测试人员可以根据增量代码覆盖率去完善自己的测试用例，进一步提升对质量的把控</li>\n<li>搭配全量代码覆盖率作为回归测试的参考，以便完善回归用例覆盖主流程逻辑。</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}